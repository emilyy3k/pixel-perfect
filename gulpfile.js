const gulp = require("gulp");
const ts = require("gulp-typescript");
const browserSync = require("browser-sync").create();
const uglify = require("gulp-uglify");
const sourcemaps = require("gulp-sourcemaps");
const shaderInject = require("./tools/gulp-shader-inject"); // Add this

const tsProject = ts.createProject("tsconfig.json");

// Paths
const paths = {
  scripts: ["scripts/**/*.ts", "scripts/**/*.frag", "scripts/**/*.vert"], // Watch all TypeScript and shader files
  generatedFiles: ["scripts/**/*.js", "scripts/**/*.js.map"], // Files generated by TypeScript compiler
  outDir: "scripts/", // adjust if your output dir is different
};

// Compile TypeScript
function compileTS() {
  return tsProject
    .src()
    .pipe(tsProject()) // Compile TypeScript files
    .js.pipe(sourcemaps.init({ loadMaps: true })) // Load existing sourcemaps
    .pipe(shaderInject()) // Inject shaders into PixelArtFilter.js
    .pipe(uglify()) // minify the JavaScript
    .pipe(sourcemaps.write(".")) // Write sourcemaps to the same directory
    .pipe(gulp.dest(paths.outDir)); // Output compiled files to the same directory
}

// BrowserSync for live reload
function serve(done) {
  browserSync.init({
    proxy: { target: "http://localhost:30001", ws: true }, // Change to your Foundry server port
    //open: "local",
    notify: false,
    reloadDelay: 200,
  });
  done();
}

// Reload browser
function reload(done) {
  browserSync.reload();
  done();
}

// Watch files
function watchFiles() {
  // Watch all TS and shader files
  const scriptWatcher = gulp.watch(paths.scripts, {
    ignoreInitial: false,
    events: ["change"],
    ignored: [...paths.generatedFiles], // Ignore generated files
    queue: false, // Don't queue events
    delay: 500, // 0.5 second delay
  });

  scriptWatcher.on("change", (path) => {
    console.log(`Script file changed: ${path}`);
    gulp.series(
      compileTS,
      reload
    )((err) => {
      if (err) console.error("Error processing script change:", err);
    });
  });
}

exports.default = gulp.series(compileTS, serve, watchFiles);
