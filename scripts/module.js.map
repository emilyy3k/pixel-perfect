{"version":3,"file":"module.js","sources":["module.js"],"sourcesContent":["// pixel-perfect module for Foundry VTT v12\nimport { PixelPerfectFilter } from \"./PixelArtFilter.js\";\n// Usage in Foundry VTT\nHooks.on('canvasReady', async () => {\n    console.log(\"pixel-perfect: Canvas is ready, initializing.\");\n    const pixelFilters = new Map();\n    /**\n     * Applies a PixelPerfectFilter to a placeable object (Token or Tile).\n     *\n     * This function manages the lifecycle of pixel filters for game objects:\n     * - Creates a new filter if one doesn't exist for this placeable\n     * - Updates existing filters with the latest placeable data\n     * - Cleans up orphaned filters (when target objects change)\n     * - Adds the filter to the object's render pipeline if not already present\n     * - Configures texture settings to prevent rendering artifacts\n     *\n     * @param {Token | Tile} placeable - The Token or Tile object to apply the pixel perfect filter to\n     * @returns void\n     *\n     * @remarks\n     * The function requires the placeable to have a valid mesh property.\n     * It stores filters in a global pixelFilters Map using the placeable's ID as the key.\n     * Texture settings are adjusted to LINEAR scaling with mipmapping to prevent jittering\n     * while maintaining crisp pixel art rendering.\n     */\n    const applyFilterToPlaceable = (placeable) => {\n        if (!placeable?.mesh) {\n            console.log(\"pixel-perfect: Placeable has no sprite or texture\", placeable?.id);\n            return;\n        }\n        //console.log(`pixel-perfect: Applying filter to placeable ${placeable.id}`);\n        let pixelFilter = pixelFilters.get(placeable.id);\n        let targetObj = placeable.mesh;\n        // Filter for orphaned filters\n        if (pixelFilter?.targetSprite && pixelFilter.targetSprite !== targetObj) {\n            if (pixelFilter.targetSprite.filters) {\n                pixelFilter.targetSprite.filters = pixelFilter.targetSprite.filters.filter(f => f !== pixelFilter);\n                if (pixelFilter.targetSprite.filters.length === 0)\n                    pixelFilter.targetSprite.filters = null;\n            }\n        }\n        // Create a new filter if needed\n        if (!pixelFilter) {\n            console.log(`pixel-perfect: Creating new filter for placeable ${placeable.id}`);\n            pixelFilter = new PixelPerfectFilter(placeable);\n            pixelFilters.set(placeable.id, pixelFilter);\n        }\n        // Always update the filter's sprite/texture reference\n        // caching etc. is handled by the function itself\n        pixelFilter.updatePlaceableData(placeable);\n        // if filters is null, initialize it as an empty array\n        if (!targetObj.filters)\n            targetObj.filters = [];\n        // Add our filter if it's not already there\n        const hasFilter = targetObj.filters?.some(f => f === pixelFilter) || false;\n        if (!hasFilter) {\n            console.log(`pixel-perfect: Adding filter to placeable sprite ${placeable.id}`);\n            // Ensure the filter is at the start of the filters array\n            targetObj.filters.unshift(pixelFilter);\n            console.log(`pixel-perfect: Filter added, total filters: ${targetObj.filters.length}`);\n            if (placeable.texture?.baseTexture) {\n                // using linear to avoid jittering. end result will still be sharp.\n                placeable.texture.baseTexture.setStyle(PIXI.SCALE_MODES.LINEAR, PIXI.MIPMAP_MODES.ON);\n                if (!placeable.texture.baseTexture.valid) {\n                    placeable.texture.baseTexture.update();\n                }\n            }\n        }\n        else {\n            // check if the filter is applied but not the first in the array\n            const filterIndex = targetObj.filters.indexOf(pixelFilter);\n            if (filterIndex > 0) {\n                console.log(`pixel-perfect: Moving filter to front for placeable ${placeable.id}`);\n                // Move the filter to the front of the array\n                targetObj.filters.splice(filterIndex, 1);\n                targetObj.filters.unshift(pixelFilter);\n            }\n        }\n        //targetObj.cacheAsBitmap = false;\n        placeable.texture?.update();\n    };\n    // const applyFilterToEnvironment = () => {\n    //   // @ts-ignore\n    //   const foreground = canvas.environment.primary.foreground as PrimarySpriteMesh;\n    //   // @ts-ignore\n    //   const background = canvas.environment.primary.background as PrimarySpriteMesh;\n    //   // quick environment object to loop through\n    //   const environment = {foreground: {mesh: foreground, id: \"foreground\"}, background: {mesh: background, id: \"background\"}};\n    //   for (const [id, {mesh}] of Object.entries(environment)) {\n    //     if (!mesh.texture?.baseTexture.resource) {\n    //       console.warn(`pixel-perfect: No texture found for environment ${id}, skipping filter application.`);\n    //       continue;\n    //     }\n    //     let pixelFilter = pixelFilters.get(id);\n    //     // Create a new filter if needed\n    //     if (!pixelFilter) {\n    //       console.log(`pixel-perfect: Creating new filter for environment ${id}`);\n    //       pixelFilter = new PixelPerfectFilter(mesh);\n    //       pixelFilters.set(id, pixelFilter);\n    //     }\n    //     pixelFilter.updateSpriteData(mesh);\n    //   }\n    // };\n    // Delete filter instance\n    /**\n     * Removes and cleans up a pixel filter instance associated with a placeable object.\n     *\n     * @param placeable - The Token or Tile from which to remove the filter\n     *\n     * @remarks\n     * This function:\n     * 1. Checks if the placeable has an associated filter in the pixelFilters map\n     * 2. Removes the filter from the placeable's mesh filters array\n     * 3. Sets filters to null if no filters remain (for memory efficiency)\n     * 4. Calls the filter's destroy method if it exists\n     * 5. Removes the filter reference from the pixelFilters map\n     */\n    const deleteFilterInstance = (placeable) => {\n        // Check if the placeable has a filter instance\n        const filter = pixelFilters.get(placeable.id);\n        // teardown the full size texture sampler\n        //filter?.uOriginalTexture?.destroy(true);\n        if (filter) {\n            console.log(`pixel-perfect: Deleting filter instance for placeable ${placeable.id}`);\n            // Remove the filter from the placeable\n            const targetObj = placeable.mesh;\n            if (targetObj && targetObj.filters) {\n                targetObj.filters = targetObj.filters.filter(f => f !== filter);\n                // If there are no filters left, set it to null for memory efficiency reasons (according to PIXI docs)\n                if (targetObj.filters.length === 0)\n                    targetObj.filters = null;\n            }\n            if (typeof filter.destroy === \"function\")\n                filter.destroy();\n            pixelFilters.delete(placeable.id);\n        }\n    };\n    // Apply filter to background & foreground\n    //applyFilterToEnvironment();\n    // Apply filter when a token refreshes \n    Hooks.on('refreshToken', applyFilterToPlaceable);\n    Hooks.on('drawToken', applyFilterToPlaceable);\n    Hooks.on('deleteToken', deleteFilterInstance);\n    Hooks.on('refreshTile', applyFilterToPlaceable);\n    Hooks.on('drawTile', applyFilterToPlaceable);\n    Hooks.on('deleteTile', deleteFilterInstance);\n    // Apply filters to all existing tokens\n    if (canvas.tokens) {\n        for (const token of canvas.tokens.placeables) {\n            applyFilterToPlaceable(token);\n        }\n    }\n    if (canvas.tiles) {\n        for (const tile of canvas.tiles.placeables) {\n            applyFilterToPlaceable(tile);\n        }\n    }\n    // Cleanup on canvas tear down\n    Hooks.on('canvasTearDown', () => {\n        console.log(\"pixel-perfect: Canvas tear down, cleaning up filters.\");\n        // Remove our hooks - be specific to avoid removing others' hooks\n        Hooks.off('refreshToken', applyFilterToPlaceable);\n        Hooks.off('drawToken', applyFilterToPlaceable);\n        Hooks.off('deleteToken', deleteFilterInstance);\n        Hooks.off('refreshTile', applyFilterToPlaceable);\n        Hooks.off('drawTile', applyFilterToPlaceable);\n        Hooks.off('deleteTile', deleteFilterInstance);\n        // look through all placeables in the pixelFilters map and remove the filter\n        for (const [id, filter] of pixelFilters) {\n            //let spriteMesh = null;\n            // if (id === \"foreground\" || id === \"background\") {\n            //   // @ts-ignore\n            //   spriteMesh = canvas.environment.primary[id] as PrimarySpriteMesh;\n            // } else {\n            const placeable = canvas.tokens?.get(id) || canvas.tiles?.get(id);\n            const spriteMesh = placeable?.mesh;\n            //}\n            if (spriteMesh) {\n                console.log(`pixel-perfect: Cleaning up filters for placeable ${id}`);\n                // check if the placeable's mesh has an instance of the filter, and if it does, remove just that one.\n                spriteMesh.filters = spriteMesh.filters?.filter(f => !(f instanceof PixelPerfectFilter)) || null;\n                // If there are no filters left, set it to null for memory efficiency reasons (according to PIXI docs)\n                if (spriteMesh.filters?.length === 0)\n                    spriteMesh.filters = null;\n            }\n        }\n        // Clear the filter map\n        pixelFilters.clear();\n    });\n});\n"],"names":["PixelPerfectFilter","Hooks","on","async","console","log","pixelFilters","Map","applyFilterToPlaceable","placeable","mesh","let","pixelFilter","get","id","targetObj","hasFilter","targetSprite","filters","filter","f","length","set","updatePlaceableData","some","filterIndex","indexOf","splice","unshift","texture","baseTexture","setStyle","PIXI","SCALE_MODES","LINEAR","MIPMAP_MODES","ON","valid","update","deleteFilterInstance","destroy","delete","canvas","tokens","token","placeables","tiles","tile","off","spriteMesh","clear"],"mappings":"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"}